# -*- coding: utf-8 -*-
"""projet_happiness.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JRuWvKxN8kIw3jN9fbwAcRi1FaVo9pSv
"""

import pandas as pd

df = pd.read_excel("/content/DataForTable2.1.xls")
continent = pd.read_csv("/content/continents2.csv")

df

### Changement du nom de colonne pour qu'il soit identique sur les deux dataframes
continent = continent.rename(columns={'name': 'Country name'})

### Merge des 2 df pour avoir la colonne region et subregion dans le df de base
df = pd.merge(df, continent, on=["Country name"], how="left")
df

df.columns

### selection des colonnes qui m'intéressent, toutes celle du 1er df et seulement region et subregion dans le 2
df = df[['Country name', 'year', 'Life Ladder', 'Log GDP per capita',
       'Social support', 'Healthy life expectancy at birth',
       'Freedom to make life choices', 'Generosity',
       'Perceptions of corruption', 'Positive affect', 'Negative affect',
        'region', 'sub-region']]
df

df.isna().sum()

### voir toutes les lignes où la région est nulle
  test=df[df['region'].isnull()]
  test

### voir les valeurs uniques de la colonne région

df["region"].unique()

test=df[df['Log GDP per capita'].isnull()]
test

### voir les valeurs unique de la colonne subregion

df["sub-region"].unique()

### Ajout des regions / sub-regions des valeurs nulles

df.loc[df['Country name'] == 'Bosnia and Herzegovina', 'region'] = 'Europe'
df.loc[df['Country name'] == 'Bosnia and Herzegovina', 'sub-region'] = 'Southern Europe'

df.loc[df['Country name'] == 'Congo (Brazzaville)', 'region'] = 'Africa'
df.loc[df['Country name'] == 'Congo (Brazzaville)', 'sub-region'] = 'Middle Africa'

df.loc[df['Country name'] == 'Congo (Kinshasa)', 'region'] = 'Africa'
df.loc[df['Country name'] == 'Congo (Kinshasa)', 'sub-region'] = 'Middle Africa'

df.loc[df['Country name'] == 'Hong Kong S.A.R. of China', 'region'] = 'Asia'
df.loc[df['Country name'] == 'Hong Kong S.A.R. of China', 'sub-region'] = 'Eastern Asia'

df.loc[df['Country name'] == 'Ivory Coast', 'region'] = 'Africa'
df.loc[df['Country name'] == 'Ivory Coast', 'sub-region'] = 'Western Africa'

df.loc[df['Country name'] == 'Kosovo', 'region'] = 'Europe'
df.loc[df['Country name'] == 'Kosovo', 'sub-region'] = 'Southern Europe'

df.loc[df['Country name'] == 'North Macedonia', 'region'] = 'Europe'
df.loc[df['Country name'] == 'North Macedonia', 'sub-region'] = 'Southern Europe'

df.loc[df['Country name'] == 'Somaliland region', 'region'] = 'Africa'
df.loc[df['Country name'] == 'Somaliland region', 'sub-region'] = 'Eastern Africa'

df.loc[df['Country name'] == 'State of Palestine', 'region'] = 'Asia'
df.loc[df['Country name'] == 'State of Palestine', 'sub-region'] = 'Western Asia'

df.loc[df['Country name'] == 'Taiwan Province of China', 'region'] = 'Asia'
df.loc[df['Country name'] == 'Taiwan Province of China', 'sub-region'] = 'Eastern Asia'

df.loc[df['Country name'] == 'Türkiye', 'region'] = 'Asia'
df.loc[df['Country name'] == 'Türkiye', 'sub-region'] = 'Western Asia'

df.loc[df['Country name'] == 'Czechia', 'region'] = 'Europe'
df.loc[df['Country name'] == 'Czechia', 'sub-region'] = 'Western Europe'

df[df['Country name'] == 'State of Palestine']

### Mise à jour des données life expectancy d'Haiti

df.loc[(df['Country name'] == 'Haiti') & (df['year'] == 2006), 'Healthy life expectancy at birth'] = 51.5
df.loc[(df['Country name'] == 'Haiti') & (df['year'] == 2008), 'Healthy life expectancy at birth'] = 52.5
df.loc[(df['Country name'] == 'Haiti') & (df['year'] == 2010), 'Healthy life expectancy at birth'] = 35.3
df.loc[(df['Country name'] == 'Haiti') & (df['year'] == 2011), 'Healthy life expectancy at birth'] = 52.9
df.loc[(df['Country name'] == 'Haiti') & (df['year'] == 2012), 'Healthy life expectancy at birth'] = 53.2
df.loc[(df['Country name'] == 'Haiti') & (df['year'] == 2013), 'Healthy life expectancy at birth'] = 53.5
df.loc[(df['Country name'] == 'Haiti') & (df['year'] == 2014), 'Healthy life expectancy at birth'] = 53.8

### export en CSV

df.to_csv("Data_Happiness.csv", index=False)

### Verification données aberrantes Life Expectancy at birth, le min s'explique par Haiti en 2010 big tremblement de terre

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure()
sns.boxplot(x='Healthy life expectancy at birth', data=df)
plt.show()

### Verification du PIB
import seaborn as sns
import matplotlib.pyplot as plt
plt.figure()
sns.boxplot(x='Log GDP per capita', data=df)
plt.show()

### Verification de l'happiness score
import seaborn as sns
import matplotlib.pyplot as plt
plt.figure()
sns.boxplot(x='Life Ladder', data=df)
plt.show()