# -*- coding: utf-8 -*-
"""projet_happiness.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JRuWvKxN8kIw3jN9fbwAcRi1FaVo9pSv
"""

import pandas as pd

df = pd.read_excel("/content/DataForTable2.1.xls")
continent = pd.read_csv("/content/continents2.csv")

df

### Changement du nom de colonne pour qu'il soit identique sur les deux dataframes
continent = continent.rename(columns={'name': 'Country name'})

### Merge des 2 df pour avoir la colonne region et subregion dans le df de base
df = pd.merge(df, continent, on=["Country name"], how="left")
df

df.columns

### selection des colonnes qui m'intéressent, toutes celle du 1er df et seulement region et subregion dans le 2
df = df[['Country name', 'year', 'Life Ladder', 'Log GDP per capita',
       'Social support', 'Healthy life expectancy at birth',
       'Freedom to make life choices', 'Generosity',
       'Perceptions of corruption', 'Positive affect', 'Negative affect',
        'region', 'sub-region']]
df

df.isna().sum()

### voir toutes les lignes où la région est nulle
  test=df[df['region'].isnull()]
  test

### voir les valeurs uniques de la colonne région

df["region"].unique()

test=df[df['Log GDP per capita'].isnull()]
test

### voir les valeurs unique de la colonne subregion

df["sub-region"].unique()

### Ajout des regions / sub-regions des valeurs nulles

df.loc[df['Country name'] == 'Bosnia and Herzegovina', 'region'] = 'Europe'
df.loc[df['Country name'] == 'Bosnia and Herzegovina', 'sub-region'] = 'Southern Europe'

df.loc[df['Country name'] == 'Congo (Brazzaville)', 'region'] = 'Africa'
df.loc[df['Country name'] == 'Congo (Brazzaville)', 'sub-region'] = 'Middle Africa'

df.loc[df['Country name'] == 'Congo (Kinshasa)', 'region'] = 'Africa'
df.loc[df['Country name'] == 'Congo (Kinshasa)', 'sub-region'] = 'Middle Africa'

df.loc[df['Country name'] == 'Hong Kong S.A.R. of China', 'region'] = 'Asia'
df.loc[df['Country name'] == 'Hong Kong S.A.R. of China', 'sub-region'] = 'Eastern Asia'

df.loc[df['Country name'] == 'Ivory Coast', 'region'] = 'Africa'
df.loc[df['Country name'] == 'Ivory Coast', 'sub-region'] = 'Western Africa'

df.loc[df['Country name'] == 'Kosovo', 'region'] = 'Europe'
df.loc[df['Country name'] == 'Kosovo', 'sub-region'] = 'Southern Europe'

df.loc[df['Country name'] == 'North Macedonia', 'region'] = 'Europe'
df.loc[df['Country name'] == 'North Macedonia', 'sub-region'] = 'Southern Europe'

df.loc[df['Country name'] == 'Somaliland region', 'region'] = 'Africa'
df.loc[df['Country name'] == 'Somaliland region', 'sub-region'] = 'Eastern Africa'

df.loc[df['Country name'] == 'State of Palestine', 'region'] = 'Asia'
df.loc[df['Country name'] == 'State of Palestine', 'sub-region'] = 'Western Asia'

df.loc[df['Country name'] == 'Taiwan Province of China', 'region'] = 'Asia'
df.loc[df['Country name'] == 'Taiwan Province of China', 'sub-region'] = 'Eastern Asia'

df.loc[df['Country name'] == 'Türkiye', 'region'] = 'Asia'
df.loc[df['Country name'] == 'Türkiye', 'sub-region'] = 'Western Asia'

df.loc[df['Country name'] == 'Czechia', 'region'] = 'Europe'
df.loc[df['Country name'] == 'Czechia', 'sub-region'] = 'Western Europe'

df[df['Country name'] == 'State of Palestine']

### Mise à jour des données life expectancy d'Haiti

df.loc[(df['Country name'] == 'Haiti') & (df['year'] == 2006), 'Healthy life expectancy at birth'] = 51.5
df.loc[(df['Country name'] == 'Haiti') & (df['year'] == 2008), 'Healthy life expectancy at birth'] = 52.5
df.loc[(df['Country name'] == 'Haiti') & (df['year'] == 2010), 'Healthy life expectancy at birth'] = 35.3
df.loc[(df['Country name'] == 'Haiti') & (df['year'] == 2011), 'Healthy life expectancy at birth'] = 52.9
df.loc[(df['Country name'] == 'Haiti') & (df['year'] == 2012), 'Healthy life expectancy at birth'] = 53.2
df.loc[(df['Country name'] == 'Haiti') & (df['year'] == 2013), 'Healthy life expectancy at birth'] = 53.5
df.loc[(df['Country name'] == 'Haiti') & (df['year'] == 2014), 'Healthy life expectancy at birth'] = 53.8

### Verification données aberrantes Life Expectancy at birth, le min s'explique par Haiti en 2010 big tremblement de terre

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure()
sns.boxplot(x='Healthy life expectancy at birth', data=df)
plt.show()

### Verification du PIB
import seaborn as sns
import matplotlib.pyplot as plt
plt.figure()
sns.boxplot(x='Log GDP per capita', data=df)
plt.show()

### Verification de l'happiness score
import seaborn as sns
import matplotlib.pyplot as plt
plt.figure()
sns.boxplot(x='Life Ladder', data=df)
plt.show()

df.dtypes

df["Country name"].unique()

classification = {
    'Afghanistan': 'Sous-Développé', 'Albania': 'En Développement', 'Algeria': 'En Développement',
    'Angola': 'En Développement', 'Argentina': 'En Développement', 'Armenia': 'En Développement',
    'Australia': 'Développé', 'Austria': 'Développé', 'Azerbaijan': 'En Développement',
    'Bahrain': 'Développé', 'Bangladesh': 'En Développement', 'Belarus': 'En Développement',
    'Belgium': 'Développé', 'Belize': 'En Développement', 'Benin': 'Sous-Développé', 'Bhutan': 'Sous-Développé',
    'Bolivia': 'En Développement', 'Bosnia and Herzegovina': 'En Développement', 'Botswana': 'En Développement',
    'Brazil': 'En Développement', 'Bulgaria': 'En Développement', 'Burkina Faso': 'Sous-Développé',
    'Burundi': 'Sous-Développé', 'Cambodia': 'Sous-Développé', 'Cameroon': 'Sous-Développé',
    'Canada': 'Développé', 'Central African Republic': 'Sous-Développé', 'Chad': 'Sous-Développé',
    'Chile': 'Développé', 'China': 'En Développement', 'Colombia': 'En Développement', 'Comoros': 'Sous-Développé',
    'Congo (Brazzaville)': 'Sous-Développé', 'Congo (Kinshasa)': 'Sous-Développé', 'Costa Rica': 'En Développement',
    'Croatia': 'Développé', 'Cuba': 'En Développement', 'Cyprus': 'Développé', 'Czechia': 'Développé',
    'Denmark': 'Développé', 'Djibouti': 'Sous-Développé', 'Dominican Republic': 'En Développement',
    'Ecuador': 'En Développement', 'Egypt': 'En Développement', 'El Salvador': 'En Développement',
    'Estonia': 'Développé', 'Eswatini': 'Sous-Développé', 'Ethiopia': 'Sous-Développé', 'Finland': 'Développé',
    'France': 'Développé', 'Gabon': 'En Développement', 'Gambia': 'Sous-Développé', 'Georgia': 'En Développement',
    'Germany': 'Développé', 'Ghana': 'Sous-Développé', 'Greece': 'Développé', 'Guatemala': 'Sous-Développé',
    'Guinea': 'Sous-Développé', 'Guyana': 'En Développement', 'Haiti': 'Sous-Développé', 'Honduras': 'Sous-Développé',
    'Hong Kong S.A.R. of China': 'Développé', 'Hungary': 'Développé', 'Iceland': 'Développé',
    'India': 'En Développement', 'Indonesia': 'En Développement', 'Iran': 'En Développement',
    'Iraq': 'En Développement', 'Ireland': 'Développé', 'Israel': 'Développé', 'Italy': 'Développé',
    'Ivory Coast': 'En Développement', 'Jamaica': 'En Développement', 'Japan': 'Développé',
    'Jordan': 'En Développement', 'Kazakhstan': 'En Développement', 'Kenya': 'Sous-Développé', 'Kosovo': 'En Développement',
    'Kuwait': 'Développé', 'Kyrgyzstan': 'Sous-Développé', 'Laos': 'Sous-Développé', 'Latvia': 'Développé',
    'Lebanon': 'En Développement', 'Lesotho': 'Sous-Développé', 'Liberia': 'Sous-Développé', 'Libya': 'En Développement',
    'Lithuania': 'Développé', 'Luxembourg': 'Développé', 'Madagascar': 'Sous-Développé', 'Malawi': 'Sous-Développé',
    'Malaysia': 'En Développement', 'Maldives': 'En Développement', 'Mali': 'Sous-Développé', 'Malta': 'Développé',
    'Mauritania': 'Sous-Développé', 'Mauritius': 'En Développement', 'Mexico': 'En Développement',
    'Moldova': 'En Développement', 'Mongolia': 'En Développement', 'Montenegro': 'En Développement',
    'Morocco': 'En Développement', 'Mozambique': 'Sous-Développé', 'Myanmar': 'Sous-Développé', 'Namibia': 'En Développement',
    'Nepal': 'Sous-Développé', 'Netherlands': 'Développé', 'New Zealand': 'Développé', 'Nicaragua': 'Sous-Développé',
    'Niger': 'Sous-Développé', 'Nigeria': 'Sous-Développé', 'North Macedonia': 'En Développement', 'Norway': 'Développé',
    'Oman': 'Développé', 'Pakistan': 'En Développement', 'Panama': 'En Développement', 'Paraguay': 'En Développement',
    'Peru': 'En Développement', 'Philippines': 'En Développement', 'Poland': 'Développé', 'Portugal': 'Développé',
    'Qatar': 'Développé', 'Romania': 'En Développement', 'Russia': 'En Développement', 'Rwanda': 'Sous-Développé',
    'Saudi Arabia': 'Développé', 'Senegal': 'Sous-Développé', 'Serbia': 'En Développement', 'Sierra Leone': 'Sous-Développé',
    'Singapore': 'Développé', 'Slovakia': 'Développé', 'Slovenia': 'Développé', 'Somalia': 'Sous-Développé',
    'Somaliland region': 'Sous-Développé', 'South Africa': 'En Développement', 'South Korea': 'Développé',
    'South Sudan': 'Sous-Développé', 'Spain': 'Développé', 'Sri Lanka': 'En Développement', 'State of Palestine': 'Sous-Développé',
    'Sudan': 'Sous-Développé', 'Suriname': 'En Développement', 'Sweden': 'Développé', 'Switzerland': 'Développé',
    'Syria': 'Sous-Développé', 'Taiwan Province of China': 'Développé', 'Tajikistan': 'Sous-Développé',
    'Tanzania': 'Sous-Développé', 'Thailand': 'En Développement', 'Togo': 'Sous-Développé',
    'Trinidad and Tobago': 'Développé', 'Tunisia': 'En Développement', 'Turkmenistan': 'En Développement',
    'Türkiye': 'En Développement', 'Uganda': 'Sous-Développé', 'Ukraine': 'En Développement',
    'United Arab Emirates': 'Développé', 'United Kingdom': 'Développé', 'United States': 'Développé',
    'Uruguay': 'Développé', 'Uzbekistan': 'En Développement', 'Venezuela': 'En Développement', 'Vietnam': 'En Développement',
    'Yemen': 'Sous-Développé', 'Zambia': 'Sous-Développé', 'Zimbabwe': 'Sous-Développé'
}


# Ajouter une colonne "Category" en utilisant le dictionnaire de classification
df['Category'] = df['Country name'].map(classification)

df

### export en CSV

df.to_csv("Data_Happiness_2.csv", index=False)

df[df['Category'] == 'En Développement']

df[df['Country name'] == 'France']

pip install geopandas matplotlib pandas

import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt

# Charger le shapefile des pays
shapefile_path = "/content/ne_110m_admin_0_countries.shp"
world = gpd.read_file(shapefile_path)


# Joindre les données des pays avec le shapefile
world = world.merge(df, how='left', left_on='NAME', right_on='Country name')

# Définir les couleurs pour chaque catégorie
color_mapping = {
    'Développé': 'green',
    'En Développement': 'yellow',
    'Sous-Développé': 'red'
}
world['color'] = world['Category'].map(color_mapping)

# Gérer les NaN : Remplacez par une couleur neutre (par exemple, gris pour les pays non catégorisés)
world['color'] = world['color'].fillna('lightgrey')

# Diagnostiquer les pays non catégorisés
missing_countries = world[world['color'] == 'lightgrey']
print("Pays sans catégorie :")
print(missing_countries[['NAME']])

# Tracer la carte
fig, ax = plt.subplots(1, 1, figsize=(15, 10))
world.plot(ax=ax, color=world['color'], edgecolor='black')

# Ajouter une légende personnalisée
import matplotlib.patches as mpatches
legend_handles = [
    mpatches.Patch(color='green', label='Développé'),
    mpatches.Patch(color='yellow', label='En Développement'),
    mpatches.Patch(color='red', label='Sous-Développé'),
    mpatches.Patch(color='lightgrey', label='Non catégorisé')
]
ax.legend(handles=legend_handles, loc='lower left')

# Afficher la carte
plt.title("Carte des Pays par Catégorie")
plt.show()

# Extraire les noms uniques depuis le shapefile
shapefile_countries = world['NAME'].unique()

# Extraire les noms uniques depuis le DataFrame
df_countries = df['Country name'].unique()

# Afficher les listes
print("Noms dans le shapefile :")
print(sorted(shapefile_countries))
print("Noms dans le DataFrame :")
print(sorted(df_countries))

name_mapping = {
    "United States of America": "United States",
    "Dem. Rep. Congo": "Congo (Kinshasa)",
    "Dominican Rep.": "Dominican Republic",
    "Côte d'Ivoire": "Ivory Coast",
    "Congo": "Congo (Brazzaville)",
    "Palestine": "State of Palestine",
    "Turkey": "Türkiye",
    "Taiwan": "Taiwan Province of China",
    " N. Cyprus": "Cyprus",
    "Somaliland": "Somaliland region",
    " Bosnia and Herz.": "Bosnia and Herzegovina",
    "S. Sudan": 'South Sudan',
    "Central African Rep.": "Central African Republic",
    'eSwatini':"Eswatini",
    'Bosnia and Herz.':'Bosnia and Herzegovina',
}

df['Country name'] = df['Country name'].replace(name_mapping)

world['NAME'] = world['NAME'].replace(name_mapping)

world = world.merge(df, how='left', left_on='NAME', right_on='Country name')

missing_countries = set(df['Country name']) - set(world['NAME'])
print("Pays encore manquants après harmonisation :", missing_countries)

import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# Assurez-vous que 'color' contient les couleurs basées sur la catégorie
color_mapping = {
    'Développé': 'green',
    'En Développement': 'yellow',
    'Sous-Développé': 'red'
}
world['color'] = world['Category_y'].map(color_mapping).fillna('lightgrey')  # Gris pour les pays non catégorisés

# Créez la figure
fig, ax = plt.subplots(1, 1, figsize=(15, 10))


# Tracez la carte
world.plot(ax=ax, color=world['color'], edgecolor='black')

# Ajouter une légende personnalisée
legend_handles = [
    mpatches.Patch(color='green', label='Développé'),
    mpatches.Patch(color='yellow', label='En Développement'),
    mpatches.Patch(color='red', label='Sous-Développé'),
    mpatches.Patch(color='lightgrey', label='Non catégorisé')
]
ax.legend(handles=legend_handles, loc='lower left')

# Titre
plt.title("Carte des Pays par Catégorie", fontsize=16)
plt.show()

print(world.columns)

import pandas as pd

regime = pd.read_csv("/content/avec les parties politiques.csv")
regime

import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# Remplacez le chemin par le chemin vers le fichier shapefile téléchargé
shapefile_path = '/content/ne_110m_admin_0_countries.shp'

# Charger les données géographiques du monde (shapefile téléchargé)
world_regime = gpd.read_file(shapefile_path)

# Mapping des régimes politiques à des couleurs
color_mapping = {
    'République présidentielle': '#1f77b4',
    'République islamique': '#ff7f0e',
    'République parlementaire': '#2ca02c',
    'Monarchie constitutionnelle': '#d62728',
    'Monarchie absolue': '#9467bd',
    'Régime autoritaire': '#8c564b',
    'République fédérale': '#e377c2',
    'République de facto': '#7f7f7f',
    'République militaire': '#bcbd22',
    'République semi-présidentielle': '#17becf',
    'État communiste': '#ff9896',
    'Autorité palestinienne': '#c5b0d5'
}

# Fusionner les données géographiques avec le DataFrame des régimes politiques
world_regime = world_regime.merge(regime, how='left', left_on='NAME', right_on='Country name')

# Ajouter une colonne de couleur en fonction du régime politique
world_regime['color'] = world_regime['Régime politique'].map(color_mapping)

# Gérer les NaN : les pays sans régime politique seront colorés en gris
world_regime['color'] = world_regime['color'].fillna('lightgrey')

# Diagnostiquer les pays sans catégorie (régime politique)
missing_countries = world_regime[world_regime['color'] == 'lightgrey']


# Créer la carte
fig, ax = plt.subplots(1, 1, figsize=(20, 12))

# Tracer la carte avec les couleurs associées aux régimes politiques
world_regime.plot(ax=ax, color=world_regime['color'], edgecolor='black')

# Ajouter une légende
legend_handles = [mpatches.Patch(color=color, label=regime) for regime, color in color_mapping.items()]
ax.legend(handles=legend_handles, loc='upper left', title="Régimes politiques", fontsize=10)

# Ajouter un titre
plt.title("Carte du Monde par Régime Politique", fontsize=16)
plt.axis('off')  # Supprimer les axes pour une carte plus propre
plt.show()

print("Pays sans régime politique :")
print(missing_countries[['NAME', 'Régime politique']])

name_mapping = {
    "United States of America": "United States",
    "Dem. Rep. Congo": "Congo (Kinshasa)",
    "Dominican Rep.": "Dominican Republic",
    "Côte d'Ivoire": "Ivory Coast",
    "Congo": "Congo (Brazzaville)",
    "Palestine": "State of Palestine",
    "Turkey": "Türkiye",
    "Taiwan": "Taiwan Province of China",
    " N. Cyprus": "Cyprus",
    "Somaliland": "Somaliland region",
    " Bosnia and Herz.": "Bosnia and Herzegovina",
    "S. Sudan": 'South Sudan',
    "Central African Rep.": "Central African Republic",
    'eSwatini':"Eswatini",
    'Bosnia and Herz.':'Bosnia and Herzegovina',
}

regime['Country name'] = regime['Country name'].replace(name_mapping)

world_regime['NAME'] = world_regime['NAME'].replace(name_mapping)

world_regime = world_regime.merge(regime, how='left', left_on='NAME', right_on='Country name')

missing_countries = set(regime['Country name']) - set(world_regime['NAME'])
print("Pays encore manquants après harmonisation :", missing_countries)

import geopandas as gpd
import pandas as pd

# Supposons que vous avez téléchargé le shapefile
shapefile_path = '/content/ne_110m_admin_0_countries.shp'

# Charger les données géographiques
world_regime = gpd.read_file(shapefile_path)

# Appliquer le mapping des noms
name_mapping = {
   "United States of America": "United States",
    "Dem. Rep. Congo": "Congo (Kinshasa)",
    "Dominican Rep.": "Dominican Republic",
    "Côte d'Ivoire": "Ivory Coast",
    "Congo": "Congo (Brazzaville)",
    "Palestine": "State of Palestine",
    "Turkey": "Türkiye",
    "Taiwan": "Taiwan Province of China",
    " N. Cyprus": "Cyprus",
    "Somaliland": "Somaliland region",
    " Bosnia and Herz.": "Bosnia and Herzegovina",
    "S. Sudan": 'South Sudan',
    "Central African Rep.": "Central African Republic",
    'eSwatini':"Eswatini",
    'Bosnia and Herz.':'Bosnia and Herzegovina',
}

regime['Country name'] = regime['Country name'].replace(name_mapping)
world_regime['NAME'] = world_regime['NAME'].replace(name_mapping)

# Fusionner avec suffixes pour éviter les conflits
world_regime = world_regime.merge(
    regime,
    how='left',
    left_on='NAME',
    right_on='Country name',
    suffixes=('_geo', '_data')
)

# Supprimer les colonnes inutiles après fusion si nécessaire
columns_to_remove = [col for col in world_regime.columns if col.endswith('_geo') or col.endswith('_data')]
world_regime = world_regime.drop(columns=columns_to_remove)

# Vérifiez les pays manquants
missing_countries = set(regime['Country name']) - set(world_regime['NAME'])
print("Pays manquants après harmonisation :", missing_countries)

import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# Mapping des régimes politiques à des couleurs
color_mapping = {
    'République présidentielle': '#1f77b4',
    'République islamique': '#ff7f0e',
    'République parlementaire': '#2ca02c',
    'Monarchie constitutionnelle': '#d62728',
    'Monarchie absolue': '#9467bd',
    'Régime autoritaire': '#8c564b',
    'République fédérale': '#e377c2',
    'République de facto': '#7f7f7f',
    'République militaire': '#bcbd22',
    'République semi-présidentielle': '#17becf',
    'État communiste': '#ff9896',
    'Autorité palestinienne': '#c5b0d5'
}

# Ajouter une colonne pour mapper les couleurs selon le régime politique
world_regime['color'] = world_regime['Régime politique'].map(color_mapping)

# Gérer les NaN : les pays sans régime politique seront colorés en gris
world_regime['color'] = world_regime['color'].fillna('lightgrey')

# Diagnostiquer les pays sans catégorie (régime politique)
missing_countries = world_regime[world_regime['color'] == 'lightgrey']
print("Pays sans catégorie (colorés en gris) :")
print(missing_countries[['NAME', 'Régime politique']])

# Créer la carte
fig, ax = plt.subplots(1, 1, figsize=(20, 12))

# Tracer la carte avec les couleurs associées aux régimes politiques
world_regime.plot(ax=ax, color=world_regime['color'], edgecolor='black')

# Ajouter une légende
legend_handles = [mpatches.Patch(color=color, label=regime) for regime, color in color_mapping.items()]
ax.legend(handles=legend_handles, loc='upper left', title="Régimes politiques", fontsize=10)

# Ajouter un titre
plt.title("Carte du Monde par Régime Politique", fontsize=16)
plt.axis('off')  # Supprime les axes pour une carte plus propre
plt.show()